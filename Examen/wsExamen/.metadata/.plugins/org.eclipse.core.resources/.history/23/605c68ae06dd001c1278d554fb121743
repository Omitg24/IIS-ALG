package Exam;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Titulo: Clase GolfNumerico
 * 
 * @author Omar Teixeira Gonzalez, UO281847
 * @version 26/05/2022
 */
public class GolfNumerico {
	/**
	 * Constante Movements
	 */
	private static final int MOVEMENTS = 3;
	
	/**
	 * Atributos board
	 */
	private String[][] board;
	/**
	 * Atributos path, pathSolution
	 */
	private boolean[][] path, pathSolution;
	/**
	 * Atributo movements
	 */
	private int[][] movements = {{0,1},{1,0},{-1,0}};
	/**
	 * Atributos lenX, lenY
	 */
	private int lenX=0, lenY=0;
	/**
	 * Atributo points
	 */
	private int points;
	/**
	 * Atributo holes
	 */
	private int holes;
	/**
	 * Atributo pointsCounter
	 */
	private int pointsCounter;
	/**
	 * Atributo isSolution
	 */
	private boolean isSolution;
	
	
	/**
	 * Método main
	 * @param args
	 */
	public static void main(String[] args) {
//		String nomFich = args[0];
//		int points = Integer.valueOf(args[1]);
//		int holes = Integer.valueOf(args[2]);
		new GolfNumerico("files/Ejemplo1.txt", 57, 13);
	}

	/**
	 * Constructor
	 * @param nomFich
	 * @param points
	 * @param holes
	 */
	public GolfNumerico (String nomFich, int points, int holes) {
		loadBoard(nomFich);
		this.points=points;
		this.holes=holes;
		
		int i=0;
		while (!isSolution && i < lenY) {			
			path[0][i] = true;
			pointsCounter += Integer.valueOf(board[0][i]);
			backtracking(0,i,0);
			path[0][i] = false;
			pointsCounter -= Integer.valueOf(board[0][i]);
			i++;
		}
		
		showBoard();
		showPath();
		System.out.println("Points gained: " + pointsCounter);
	}
	
	

	/**
	 * Método backtracking
	 * @param level
	 */
	private void backtracking(int level, int x, int y) {		
		if (level==holes-1) {
			if (!isSolution && y==lenX-1 && points==pointsCounter) {
				isSolution=true;
				for (int i=0; i<path.length; i++) {
					for (int j=0; j<path[i].length; j++) {
						pathSolution[i][j]=path[i][j];
					}
				}
			}
		} else {
			for (int move = 0; move < MOVEMENTS; move++) {
				int nextX = movements[move][0] + x;
				int nextY = movements[move][1] + y;
				if (!isSolution && nextX > 0 && nextY > 0 && nextX < lenY && nextY < lenX && !path[nextY][nextX]) {
					if((y == 0 || y == lenX -1) && move == 0) {
						pointsCounter += Integer.valueOf(board[nextY][nextX]);
						path[nextY][nextX] = true;
						backtracking(level + 1, nextX, nextY);
						pointsCounter -= Integer.valueOf(board[nextY][nextX]);
						path[nextY][nextX] = true;
					} else if ((y != 0 && y != lenX -1)) {
						pointsCounter += Integer.valueOf(board[nextY][nextX]);
						path[nextY][nextX] = true;
						backtracking(level + 1, nextX, nextY);
						pointsCounter -= Integer.valueOf(board[nextY][nextX]);
						path[nextY][nextX] = true;
					}
				}
			}
		}		
	}

	/**
	 * Método loadBoard
	 * @param nomFich
	 */
	public void loadBoard (String nomFich) {
		int counter = 0;
	    String linea;	    
	    String[] filaMatriz= null;	   
	    
	    try {
	    	   BufferedReader fichero = new BufferedReader(new FileReader(nomFich));
	    	   while (fichero.ready()) {
	    			linea = fichero.readLine();
	    			if (!linea.contains(" ")) {
	    				if (lenX==0) {
	    					lenX = Integer.valueOf(linea);
	    				} else if (lenY==0) {
	    					lenY = Integer.valueOf(linea);
	    				} 
	    				if (lenX!=0 && lenY!= 0) {
	    					board = new String[lenX][lenY];
	    					path = new boolean[lenX][lenY];
	    					pathSolution = new boolean[lenX][lenY];
	    				}				    			
	    			} else {
	    				filaMatriz = linea.split(" ");
	    				for (int i=0; i<filaMatriz.length; i++) {
	    					board[counter][i]=filaMatriz[i];
	    				}
	    				counter++;	 
	    			}	    			   			
	    		}
	    		fichero.close();
	    }
	    catch (FileNotFoundException fnfe) {
	    	System.out.println("El archivo no se ha encontrado.");
	    }
	    catch (IOException ioe) {
	    	new RuntimeException("Error de entrada/salida.");
	    } 
	  }
	
	/**
	 * Método showBoard
	 */
	private void showBoard() {
		System.out.println("---- TABLERO ----");
		for (int i=0; i<board.length; i++) {
			for (int j=0; j<board[i].length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}
	/**
	 * Método showPath
	 */
	private void showPath() {
		System.out.println("---- CAMINO ----");
		for (int i=0; i<board.length; i++) {
			for (int j=0; j<board[i].length; j++) {
				if (pathSolution[i][j]) {
					board[i][j]="X";
				}
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}
}
